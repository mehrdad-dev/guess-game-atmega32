;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <stdbool.h>
;#include <stdlib.h>
;#include <delay.h>
;#include <stdio.h>
;#include <string.h>
;
;
;// Declare your global variables here
;flash char Pattern[4] = {0xFE, 0xFD, 0xFB, 0xF7};
;flash char key_number [4][4]={'7', '8', '9', '/',
;                              '4', '5', '6', '*',
;                              '1', '2', '3', '-',
;                              'C', '0', '=', '+'};
;char ch;
;char  buffer[4];
;char num_holder[4];
;char nuller[4];
;
;bool  new_game = true;
;bool active_session = false;
;
;int target;
;int current_number = 0;
;int num_index = 0;
;int no_of_digits = 2;

	.DSEG
;int rand_range = 6;
;int seed_time;
;int num_counter = 0;
;
;float  error = 0.0;
;
;
;
;// External Interrupt 2 service routine
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 0026 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0027 // Place your code here
; 0000 0028     char i, column = 4;
; 0000 0029     for (i=0; i<4; i++)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	i -> R17
;	column -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002A     {
; 0000 002B        PORTD = Pattern[i];
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002C 
; 0000 002D        if (PIND.4 == 0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002E        {
; 0000 002F            column = 0;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0030            break;
;PCODE: $00000026 VOL: 0
; 0000 0031        }
; 0000 0032 
; 0000 0033        if (PIND.5 == 0)
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0034        {
; 0000 0035            column = 1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0036            break;
;PCODE: $0000002D VOL: 0
; 0000 0037        }
; 0000 0038 
; 0000 0039        if (PIND.6 == 0)
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003A        {
; 0000 003B            column = 2;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003C            break;
;PCODE: $00000034 VOL: 0
; 0000 003D        }
; 0000 003E 
; 0000 003F        if (PIND.7 == 0)
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0040        {
; 0000 0041            column = 3;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0042            break;
;PCODE: $0000003B VOL: 0
; 0000 0043        }
; 0000 0044     }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0045 
; 0000 0046     ch = key_number[i][column];
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0047 
; 0000 0048     if (new_game==false && ch == '+') {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0049             ch = '';
;PCODE: $00000054 VOL: 0
; 0000 004A             lcd_clear();
;PCODE: $00000055 VOL: 0
; 0000 004B             lcd_gotoxy(0,1);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 004C             lcd_puts("Restart Game ...");
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004D             delay_ms(1500);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 004E             num_index = 0;
;PCODE: $0000005F VOL: 0
; 0000 004F             new_game = true;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0050             active_session = false;
;PCODE: $00000062 VOL: 0
; 0000 0051             lcd_clear();
;PCODE: $00000063 VOL: 0
; 0000 0052     }
; 0000 0053 
; 0000 0054 
; 0000 0055      if (ch != 'b' && active_session) {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0056             if (ch == '0' || ch == '1' ||  ch == '2' || ch == '3' || ch == '4' || ch == '5' || ch == '6' || ch == '7' || ...
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0057                     lcd_gotoxy(num_index,0);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0058                     lcd_putchar(ch);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0059 
; 0000 005A                     num_holder[num_index] = ch;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 005B                     num_counter++;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 005C                     num_index++;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 005D 
; 0000 005E                     current_number = atoi(num_holder);     // convert to int
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 005F 
; 0000 0060                     if (target >= current_number)  error = target -   current_number;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0061                     else  error = current_number - target;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0062 
; 0000 0063                     if (error == 0) {
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0064                         lcd_gotoxy(0,1);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0065                         lcd_puts("You Got It!     ");
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0066                         lcd_gotoxy(0,2);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0067                         lcd_puts("----------------");
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0068                         lcd_gotoxy(0,3);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0069                         sprintf(buffer, "Answer Is: %d", target);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 006A                         lcd_puts(buffer);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 006B                     }
; 0000 006C                     else if (error <= 3) {
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 006D                         lcd_gotoxy(0,1);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 006E                         lcd_puts("So Close!     ");
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 006F                     }
; 0000 0070                    else if ( 3 < error &&  error <= 10 ) {
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0071                         lcd_gotoxy(0,1);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0072                         lcd_puts("Close!       ");
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0073                    }
; 0000 0074                    if (10 < error &&  error <= 20) {
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0075                         lcd_gotoxy(0,1);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0076                         lcd_puts("Far!        ");
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0077                    }
; 0000 0078                    else if (20 < error) {
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0079                         lcd_gotoxy(0,1);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 007A                         lcd_puts("So Far!        ");
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 007B                    }
; 0000 007C             }
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 007D             ch = 'b';
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 007E      }
; 0000 007F 
; 0000 0080 
; 0000 0081     if (key_number[i][column] == 'C')   {
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0082         lcd_clear();
;PCODE: $00000129 VOL: 0
; 0000 0083         lcd_gotoxy(0,0);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0084         error = 0;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0085         num_index = 0;
;PCODE: $00000130 VOL: 0
; 0000 0086         num_holder[0] = nuller[0];
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0087         num_holder[1] = nuller[1];
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0088         num_holder[2] = nuller[2];
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0089         num_holder[3] = nuller[3];
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 008A 
; 0000 008B         buffer[0] = nuller[0];
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 008C         buffer[1] = nuller[1];
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 008D         buffer[2] = nuller[2];
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 008E         buffer[3] = nuller[3];
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 008F         num_counter = 0;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0090         //current_number = 0;
; 0000 0091     }
; 0000 0092 
; 0000 0093     PORTD = 0xF0;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0094 
; 0000 0095 }
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0

	.DSEG
_0xF:
	.BYTE 0x6D
;
;
;void main(void) {
; 0000 0098 void main(void) {

	.CSEG
;PCODE: $00000156 VOL: 0
; 0000 0099     // Ports
; 0000 009A     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 009B     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 009C     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 009D     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 009E     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 009F     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00A0     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00A1     PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00A2 
; 0000 00A3     // INT0: Off , INT1: Off,  INT2: On  Mode: Falling Edge
; 0000 00A4     GICR|=(0<<INT1) | (0<<INT0) | (1<<INT2);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00A5     MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 00A6     MCUCSR=(0<<ISC2);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00A7     GIFR=(0<<INTF1) | (0<<INTF0) | (1<<INTF2);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00A8     lcd_init(16);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00A9     #asm("sei")
;PCODE: $00000172 VOL: 0
	sei
;PCODE: $00000173 VOL: 0
; 0000 00AA 
; 0000 00AB     while (1) {
;PCODE: $00000174 VOL: 0
; 0000 00AC         if  (num_index >= no_of_digits)  {
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00AD             ch = ch;
;PCODE: $00000178 VOL: 0
; 0000 00AE             num_index = 0;
;PCODE: $00000179 VOL: 0
; 0000 00AF             error = 0;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00B0             delay_ms(1500);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00B1             lcd_clear();
;PCODE: $0000017E VOL: 0
; 0000 00B2             lcd_gotoxy(0,0);
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00B3             num_holder[0] = nuller[0];
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00B4             num_holder[1] = nuller[1];
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00B5             num_holder[2] = nuller[2];
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00B6             buffer[0] = nuller[0];
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00B7             buffer[1] = nuller[1];
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 00B8             buffer[2] = nuller[2];
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00B9             buffer[3] = nuller[3];
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 00BA             num_counter = 0;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 00BB             //current_number = NULL;;
; 0000 00BC         }
; 0000 00BD 
; 0000 00BE         if (new_game) {
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 00BF                 lcd_gotoxy(3,0);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00C0                 lcd_puts("Welcome To");
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00C1                 lcd_gotoxy(3,1);
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00C2                 lcd_puts("Guess Game");
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 00C3                 lcd_gotoxy(0,2);
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00C4                 lcd_puts("Press = to start");
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 00C5         }
; 0000 00C6 
; 0000 00C7         if (ch == '=' && !active_session ) {
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 00C8             lcd_clear();
;PCODE: $000001BF VOL: 0
; 0000 00C9             new_game = false;
;PCODE: $000001C0 VOL: 0
; 0000 00CA             active_session = true;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00CB             ch = '';
;PCODE: $000001C3 VOL: 0
; 0000 00CC             srand(++seed_time);
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 00CD             target =  rand() % rand_range;
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 00CE             lcd_gotoxy(0,1);
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 00CF             lcd_puts("Number Generated");
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 00D0             delay_ms(500);
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 00D1             lcd_clear();
;PCODE: $000001D8 VOL: 0
; 0000 00D2         }
; 0000 00D3         }
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 00D4 }
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0

	.DSEG
_0x2A:
	.BYTE 0x38
;
;
;
;
;
;
;
;
;//                    itoa(intpart, buffer);         // convert to string
;//                    lcd_gotoxy(0,3);
;//                    lcd_puts(buffer);
